{"version":3,"sources":["AppComponents/HeaderComponent/Header.js","AppComponents/FooterComponent/Footer.js","AppComponents/TraitRating/TraitRating.js","APIs/360SurveyApi.js","AppComponents/SurveyComponents/SurveyComponent.js","AppComponents/MainLanding/MainLanding.js","AppComponents/UploadTraits/UploadTraits.js","AppComponents/UploadCandidates/UploadCandidates.js","AppComponents/ManageSurvey/ManageSurvey.js","AppComponents/SurveyReport/SurveyReport.js","App.js","reportWebVitals.js","index.js"],"names":["Header","console","log","window","location","href","className","to","id","pathname","activeClassName","Footer","style","position","top","width","TraitRating","props","collectRating","rating","traitName","ratingData","traitId","trait_rating","candidateId","addRatingsData","state","traitNameStyle","traitNameLabel","traitData","trait_name","replace","this","trait_definition","type","name","htmlFor","onClick","Component","axios","create","baseURL","SurveyComponent","inputChange","input","e","setState","target","value","continue","bind","getCandiDate","submitSurvey","step","isCompleted","res_name","res_emp_id","res_dept","res_relation","surveyRatings","traitDetails","candidate","respondent","loadSurveyTraits","emp_id","emp_name","department","api","post","headers","data","then","res","get","search","survey_link","URLSearchParams","params","map","trait","cand_id","rel_to_cand","cand","Swal","fire","padding","role","cand_name","placeholder","onChange","job_role","company_name","MainLanding","UploadTraits","selectedFile","traitsData","readFile","uploadTraits","tableContent","uploadBtnClick","getAllTraits","evt","f","files","reader","FileReader","onload","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_json","readAsBinaryString","preventDefault","postTraits","alert","accept","scope","length","colSpan","i","UploadCandidates","candsData","getAllCandidates","uploadCandidates","ManageSurvey","createSurvey","counter","progressPercent","loaderTypeCount","btnDisable","getSurveyData","disabled","responses","camelcase","require","SurveyReport","getAvgRatings","getTotalSurveyReport","onGridReady","exportToCSV","tblType","tableCols","tableData","gridAPI","gridColAPI","surveyData","traitNames","modTraitNames","push","newTableCols","concat","tableHeader","col","fieldData","headerName","pascalCase","field","exportDataAsCsv","fileName","columnApi","height","class","columnDefs","rowData","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0915d7f7.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './Header.css'\r\nexport const Header = () => {\r\n\r\n  \r\n  console.log(window.location.href);\r\n    // function getActivated(link){\r\n    //   if (window.location.pathname === link) {\r\n    //     return 'nav-link text-white active'\r\n    //   }\r\n    //   else{\r\n    //     return 'nav-link text-white'\r\n    //   }\r\n    // }\r\n    return (\r\n      // <nav className=\"navbar navbar-dark bg-primary text-center\">\r\n      //   {/* <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b9/EXL_Logo_RGB.jpg\" style={imgStyle} alt=\"\" /> */}\r\n      //   <Link className=\"navbar-brand p-3\" to=\"/\">EXL 360° Survey</Link>\r\n\r\n      //   <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      //     <li className=\"nav-item  m-2\">\r\n      //       <Link className=\"nav-link text-white\" to='/adminPanel'>\r\n      //         Admin Panel\r\n      //       </Link>\r\n      //     </li>\r\n      //   </ul>\r\n      // </nav>\r\n      <>\r\n        <nav className=\"navbar navbar-default py-5\"></nav>\r\n        <nav className=\"navbar fixed-top navbar-expand-lg navbar-light bg-primary \">\r\n          <NavLink className=\"navbar-brand text-white px-3\" to=\"/360survey\">\r\n            EXL 360° Survey\r\n          </NavLink>\r\n          {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button> */}\r\n\r\n          <div className=\"\" id=\"navbarSupportedContent\">\r\n            {window.location.pathname !== \"/collectSurvey\" ? (\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item\">\r\n                  <NavLink className=\"nav-link text-white\"\r\n                  activeClassName=\"active\"\r\n                  to=\"/uploadTraits\">\r\n                    Upload Traits\r\n                  </NavLink>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <NavLink\r\n                    className=\"nav-link text-white\"\r\n                    activeClassName=\"active\"\r\n                    to=\"/uploadCandidates\"\r\n                  >\r\n                    Upload Candidates\r\n                  </NavLink>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <NavLink className=\"nav-link text-white\" activeClassName=\"active\" to=\"/manageSurvey\">\r\n                    Manage Survey\r\n                  </NavLink>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <NavLink\r\n                    className=\"nav-link text-white\"\r\n                    activeClassName=\"active\"\r\n                    to=\"/surveyReport\"\r\n                  >\r\n                    Survey Report\r\n                  </NavLink>\r\n                </li>\r\n                {/* <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle text-white\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n          Dropdown\r\n        </a>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n          <a className=\"dropdown-item text-white\" href=\"#\">Action</a>\r\n          <a className=\"dropdown-item text-white\" href=\"#\">Another action</a>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <a className=\"dropdown-item text-white\" href=\"#\">Something else here</a>\r\n        </div>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link disabled text-white\" href=\"#\">Disabled</a>\r\n      </li> */}\r\n              </ul>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n    let footerStyle = {\r\n        position: \"relative\",\r\n        top: \"100vh\",\r\n        width: \"100%\"\r\n    }\r\n    return (\r\n        <footer className=\"bg-dark text-light py-2\" style={footerStyle}>\r\n            <p className=\"text-center\">\r\n            Copyright &copy; www.EXL.com\r\n            </p>            \r\n        </footer>\r\n    )\r\n}\r\n","import React ,{ Component } from 'react'\r\nimport './TraitRatingStyle.css'\r\n\r\n\r\nclass TraitRating extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.traitNameStyle={\r\n      'textAlign': 'justify',\r\n      'textJustify': 'inter-word'\r\n    }\r\n\r\n    this.traitNameLabel = props.traitData.trait_name\r\n    this.traitName = this.traitNameLabel.replace(/ /g,'')\r\n    \r\n  }\r\n  \r\n\r\n  collectRating = (rating,traitName)=>{\r\n    const ratingData = {\r\n      traitId:traitName,\r\n      trait_rating:rating,      \r\n      candidateId:this.props.candidateId\r\n    }    \r\n    this.props.addRatingsData(ratingData)    \r\n  }\r\n\r\n      \r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <div className=\"card mb-3 trait-border-gradient\">\r\n          <div className=\"card-body \">\r\n            <h5 className=\"card-title\">\r\n              {\" \"}\r\n              <strong>{this.traitNameLabel}</strong>\r\n              <span className=\"text text-danger\"> *</span>\r\n              {\" \"}\r\n            </h5>\r\n            <p\r\n              className=\"card-text align-items-center d-flex\"\r\n              style={this.traitNameStyle}\r\n            >\r\n              {this.props.traitData.trait_definition}\r\n            </p>\r\n            <div className=\"box\">\r\n              <div className=\"rating\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate10\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate10\"} onClick={ ()=>{this.collectRating(10,this.props.traitData.id)} }>\r\n                  10\r\n                </label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate9\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate9\"} onClick={ ()=>{this.collectRating(9,this.props.traitData.id)} }>9</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate8\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate8\"} onClick={ ()=>{this.collectRating(8,this.props.traitData.id)} }>8</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate7\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate7\"} onClick={ ()=>{this.collectRating(7,this.props.traitData.id)} }>7</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate6\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate6\"} onClick={ ()=>{this.collectRating(6,this.props.traitData.id)} }>6</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate5\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate5\"} onClick={ ()=>{this.collectRating(5,this.props.traitData.id)} }>5</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate4\"}                  \r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate4\"} onClick={ ()=>{this.collectRating(4,this.props.traitData.id)} }>4</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate3\"}                  \r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate3\"} onClick={ ()=>{this.collectRating(3,this.props.traitData.id)} }>3</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate2\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate2\"} onClick={ ()=>{this.collectRating(2,this.props.traitData.id)} }>2</label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={this.traitName + \"-rating\"}\r\n                  id={this.traitName + \"rate1\"}\r\n                  \r\n                />\r\n                <label htmlFor={this.traitName + \"rate1\"} onClick={ ()=>{this.collectRating(1,this.props.traitData.id)} }>1</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TraitRating;\r\n\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://192.168.2.107:5000/api/user/\"\r\n})","import React,{useState,useEffect, Component} from 'react'\r\nimport  TraitRating  from '../TraitRating/TraitRating'\r\nimport './SurveyComponent.css'\r\nimport Swal from 'sweetalert2'\r\nimport api from '../../APIs/360SurveyApi'\r\n\r\n\r\n\r\nexport default class SurveyComponent extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.continue = this.continue.bind(this)\r\n    this.inputChange = this.inputChange.bind(this)\r\n    this.getCandiDate = this.getCandiDate.bind(this)\r\n    this.addRatingsData = this.addRatingsData.bind(this)\r\n    this.submitSurvey = this.submitSurvey.bind(this)\r\n\r\n    \r\n    this.state = {\r\n                  step:0,\r\n                  isCompleted:false,\r\n                  res_name:\"\",\r\n                  res_emp_id:\"\",\r\n                  res_dept:\"\",\r\n                  res_relation:\"\",\r\n                  surveyRatings:[],\r\n                  traitDetails:[],\r\n                  candidate:{},\r\n                  respondent:{}\r\n                } \r\n                  \r\n                \r\n    }\r\n  \r\n  componentDidMount(){\r\n    this.loadSurveyTraits = this.loadSurveyTraits.bind(this)    \r\n    this.getCandiDate()\r\n  }\r\n\r\n  continue(){\r\n    let respondent = {\r\n      emp_id:this.state.res_emp_id,\r\n      emp_name:this.state.res_name,\r\n      department:this.state.res_dept,      \r\n    }\r\n    console.log(respondent)\r\n    api.post('findOrCreateRespondent',{\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      data : respondent\r\n    }).then((res)=>{\r\n      console.log(res)\r\n      this.setState({respondent:res.data[0]})\r\n    })\r\n\r\n    api.get('getAllTraits').then((res)=>{      \r\n      this.setState({traitDetails:res.data})\r\n    })\r\n    this.setState({step:1})\r\n  }\r\n\r\n  getCandiDate(){\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const survey_link = params.get('survey_id');\r\n    api.get('getCandidateBySurveyLink',{params:{survey_link:survey_link}})\r\n    .then((res)=>{\r\n      console.log(res.data[0])\r\n      this.setState({candidate:res.data[0]})      \r\n    })\r\n    \r\n  }\r\n  \r\n  addRatingsData(ratingData){    \r\n    this.setState({surveyRatings:[...this.state.surveyRatings,ratingData]})\r\n    console.log(this.state.surveyRatings)\r\n  }\r\n  \r\n\r\n\r\n\r\n  loadSurveyTraits(){\r\n    // console.log('load',this.state.respondent)\r\n    return( this.state.traitDetails.map((trait) => {\r\n      return (\r\n        <TraitRating\r\n          traitData={trait}\r\n          key={trait.id}            \r\n          candidateId = {this.state.candidate.cand_id}\r\n          addRatingsData={this.addRatingsData}\r\n        />\r\n      );\r\n    }))\r\n  }\r\n\r\n  inputChange = input => e => {\r\n    // console.log(e,[input],e.target.value)\r\n    this.setState({\r\n        [input]: e.target.value\r\n    });\r\n};\r\n\r\nsubmitSurvey(){\r\n  console.log(this.state.candidate)\r\n  console.log(this.state.respondent)\r\n  console.log(this.state.surveyRatings)\r\n  console.log(this.state.res_relation)\r\n\r\n  api.post('submitSurvey',{\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    data : {\r\n      candidate:this.state.candidate,\r\n      respondent:this.state.respondent,\r\n      surveyRatings:this.state.surveyRatings,\r\n      rel_to_cand: this.state.res_relation\r\n    }\r\n  })\r\n  this.setState({isCompleted:true})\r\n}\r\n\r\n\r\n  render() {\r\n    let formStyle = {\r\n      width:\"55%\",\r\n      padding:\"50px\"\r\n  } \r\n  let cand = this.state.candidate\r\n  \r\n        if (!this.state.isCompleted) {\r\n          return (\r\n            <div className=\"container form form-container\" style={formStyle}>\r\n            <div className=\"alert alert-primary trait-border-gradient\" role=\"alert\">\r\n              Collecting... survey data for <strong>{cand.cand_name}</strong>.\r\n            </div>\r\n            <h3>Respondent's Form</h3>\r\n            <hr />\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"empName\" className=\"form-label\">\r\n                Respondent's Name<span className=\"text text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control trait-border-gradient\"\r\n                id=\"empName\"\r\n                placeholder=\"Your name goes here...\"\r\n                onChange={this.inputChange(\"res_name\")}\r\n                value = {this.state.res_name}\r\n              />\r\n            </div>\r\n      \r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"empID\" className=\"form-label\">\r\n                Respondent's Employee ID\r\n                <span className=\"text text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control trait-border-gradient\"\r\n                id=\"empID\"\r\n                placeholder=\"Type Employee ID\"\r\n                onChange={this.inputChange(\"res_emp_id\")}\r\n                value = {this.state.res_emp_id}\r\n              />\r\n            </div>\r\n      \r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"dept\" className=\"form-label\">\r\n                Department<span className=\"text text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control trait-border-gradient\"\r\n                id=\"dept\"\r\n                placeholder=\"Type your department\"\r\n                onChange={this.inputChange(\"res_dept\")}\r\n                value = {this.state.res_dept}\r\n              />\r\n            </div>\r\n      \r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"dept\" className=\"form-label\">\r\n                Relation with <strong className='text text-success'>{cand.cand_name}</strong><span className=\"text text-danger\">*</span>\r\n              </label>            \r\n              <select className=\"form-control trait-border-gradient\" onChange={this.inputChange(\"res_relation\")} value={this.state.res_relation}>\r\n                <option >Select...</option>\r\n                <option>Senior Engagement Manager</option>\r\n                <option>Senior Manager</option>\r\n                <option>Manager</option>              \r\n                <option>Colleague</option>             \r\n                <option>Self</option>             \r\n              </select>              \r\n            </div>\r\n            {\r\n              this.state.step===0?\r\n              <div className=\"text-right my-3\">\r\n              <button className=\"btn btn-primary trait-border-gradient\" onClick={this.continue} >Continue</button>\r\n          </div>:\r\n          <>\r\n          <div className=\"alert alert-primary trait-border-gradient\" role=\"alert\">\r\n          <strong>{cand.cand_name}</strong> is working as {cand.job_role} in {cand.company_name}. Please Spare sometimes to rate on this traits.\r\n          </div>\r\n          <this.loadSurveyTraits/>\r\n          <button className=\"btn btn-primary text-right\" onClick={this.submitSurvey}>Submit</button>\r\n          </>\r\n            }\r\n  \r\n          </div>\r\n          )\r\n        }\r\n        else{\r\n          return(\r\n            Swal.fire(\r\n              'Good job!',\r\n              'Your ratings will really help us to improve employee performance!',\r\n              'success'\r\n            )\r\n          )\r\n        }\r\n    \r\n        \r\n        \r\n    \r\n\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const MainLanding = () => {\r\n    const pStyle = {\r\n        'textAlign': 'justify',\r\n        'textJustify': 'inter-word'\r\n      }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"alert alert-primary\" role=\"alert\" style={pStyle}>\r\n        <p>A <b>360-degree feedback</b> (also known as <b>multi-rater feedback</b>, <b>multi source feedback</b>, or <b>multi source assessment</b>) is a process through which feedback from an employee's subordinates, colleagues, and supervisor(s), as well as a self-evaluation by the employee themselves is gathered. Such feedback can also include, when relevant, feedback from external sources who interact with the employee, such as customers and suppliers or other interested stakeholders. 360-degree feedback is so named because it solicits feedback regarding an employee's behavior from a variety of points of view (subordinate, lateral, and supervisory). It therefore may be contrasted with \"downward feedback\" (traditional feedback on work behavior and performance  delivered to subordinates by supervisory or management employees only; see traditional performance appraisal), or \"upward feedback\" delivered to supervisory or management employees by subordinates only.\r\n</p>\r\n<p>Organizations have most commonly utilized 360-degree feedback for developmental purposes, providing it to employees to assist them in developing work skills and behaviors.  However, organizations are increasingly using 360-degree feedback in performance evaluations and employment decisions (e.g., pay; promotions).  When 360-degree feedback is used for performance evaluation purposes, it is sometimes called a \"360-degree review\".\r\n</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\r\nimport * as XLSX from 'xlsx';\r\nimport api from '../../APIs/360SurveyApi'\r\n\r\nexport default class UploadTraits extends Component {\r\n    constructor(props){\r\n      super(props)\r\n      this.selectedFile = null\r\n      this.traitsData = null\r\n      \r\n      this.readFile = this.readFile.bind(this)\r\n      this.uploadTraits = this.uploadTraits.bind(this)\r\n      \r\n      \r\n      this.state = {\r\n        tableContent: [],\r\n        uploadBtnClick:0\r\n    };\r\n    \r\n    }\r\n\r\n    componentDidMount(){\r\n      this.getAllTraits = this.getAllTraits.bind(this)\r\n      this.getAllTraits()\r\n    }\r\n\r\n    readFile(evt){\r\n      this.selectedFile = evt.target.files[0]['name']\r\n      \r\n      let f\r\n      f = evt.target.files[0]\r\n      const reader = new FileReader();\r\n      reader.onload = (evt) => { // evt = on_file_select event\r\n          /* Parse data */\r\n          const bstr = evt.target.result;\r\n          const wb = XLSX.read(bstr, {type:'binary'});\r\n          /* Get first worksheet */          \r\n          const wsname = wb.SheetNames[0];\r\n          const ws = wb.Sheets[wsname];\r\n          /* Convert array of arrays */\r\n          const data = XLSX.utils.sheet_to_json(ws);\r\n          /* Update state */\r\n          if (this.traitsData ===null) {\r\n            this.traitsData=data\r\n            \r\n          }\r\n      };\r\n      reader.readAsBinaryString(f);      \r\n    }\r\n\r\n    \r\n    // xf1jc2\r\n    uploadTraits(e){ \r\n      e.preventDefault() \r\n      \r\n      const postTraits = \r\n        api.post('createTraits',{\r\n          headers: { \r\n            'Content-Type': 'application/json'\r\n          },\r\n          data : this.traitsData\r\n        })\r\n      \r\n      \r\n      if (this.selectedFile===null){\r\n        alert('Please select file')        \r\n      }\r\n      else{    \r\n        postTraits.then((res)=>{\r\n        // console.log(res) \r\n        this.getAllTraits()       \r\n        })\r\n        \r\n      }\r\n\r\n    }\r\n    // this.setState({\r\n    //   tableContent:res.data\r\n    // });\r\n    getAllTraits(){\r\n      api.get('getAllTraits').then((res)=>{\r\n            console.log(res)\r\n            this.setState({\r\n              tableContent:res.data\r\n            });\r\n      })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n      \r\n        return (\r\n          <div className=\"container form-container\">\r\n            <div className=\"alert alert-primary\" role=\"alert\">\r\n              Please upload an excel file consisting <strong>Traits</strong> and\r\n              Its <strong>Definition</strong>. <br />\r\n              Data Configuaration should be as follows:\r\n                <ol>\r\n                    <li><strong>Trait Name</strong></li>\r\n                    <li><strong>Definition</strong></li>                    \r\n                </ol>\r\n            </div>\r\n           \r\n            <form className='form-inline'>\r\n            <div className=\"input-group mb-3\">              \r\n              <input\r\n                type=\"file\"\r\n                className=\"form-control\"\r\n                id=\"inputGroupFile02\"\r\n                accept=\".xlsx\"\r\n                \r\n                onChange={(e)=>{\r\n                  this.readFile(e)\r\n                }}\r\n              />\r\n              <button\r\n                className=\"input-group-text btn btn-primary\"\r\n                htmlFor=\"inputGroupFile02\"\r\n                onClick={(e)=>{\r\n                  this.uploadTraits(e)\r\n                }}\r\n              >\r\n                Upload\r\n              </button>\r\n            </div>\r\n            </form>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" width=\"10%\">\r\n                    #\r\n                  </th>\r\n                  <th scope=\"col\" width=\"30%\">\r\n                    Traits\r\n                  </th>\r\n                  <th scope=\"col\" width=\"70%\">\r\n                    Definition\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {\r\n                this.state.tableContent.length===0?\r\n                <tr>\r\n                <th scope=\"row\" colSpan=\"3\" className=\"text-center\" >{'No-Data'}</th>       \r\n              </tr> :\r\n                this.state.tableContent.map((e,i)=>\r\n                <tr key={e.id}>\r\n                <th scope=\"row\" >{i+1}</th>\r\n                <th scope=\"row\">{e.trait_name}</th>\r\n                <td className=\"justify-text\">{e.trait_definition}</td>                  \r\n              </tr> \r\n                )\r\n              }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport * as XLSX from 'xlsx';\r\nimport api from '../../APIs/360SurveyApi'\r\n\r\n\r\nexport default class UploadCandidates extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.selectedFile = null\r\n        this.candsData = null        \r\n        this.readFile = this.readFile.bind(this)\r\n        \r\n        this.state = {\r\n          tableContent: [],\r\n          uploadBtnClick:0\r\n      };  \r\n      }\r\n\r\n      componentDidMount(){\r\n        this.getAllCandidates = this.getAllCandidates.bind(this)\r\n        this.getAllCandidates()\r\n      }\r\n      readFile(evt){\r\n        this.selectedFile = evt.target.files[0]['name']\r\n        \r\n        let f\r\n        f = evt.target.files[0]\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => { // evt = on_file_select event\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, {type:'binary'});\r\n            /* Get first worksheet */          \r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            /* Update state */\r\n            if (this.candsData ===null) {\r\n              this.candsData=data\r\n              \r\n            }\r\n        };\r\n        reader.readAsBinaryString(f);      \r\n      }\r\n      \r\n      uploadCandidates(e){ \r\n        e.preventDefault()    \r\n        if (this.selectedFile===null){\r\n          alert('Please select file')        \r\n        }\r\n        else{\r\n          api.post('createCandidates',{\r\n            headers: { \r\n              'Content-Type': 'application/json'\r\n            },\r\n            data : this.candsData\r\n          }).then((res)=>{\r\n            console.log(res)\r\n          })\r\n          this.setState({\r\n            tableContent: this.candsData \r\n          });\r\n          console.log(this.candsData)\r\n        }  \r\n      }\r\n      getAllCandidates(){\r\n        api.get('getAllCandidates').then((res)=>{\r\n          console.log(res.data)\r\n          this.setState({\r\n            tableContent: res.data\r\n          });\r\n        })\r\n      }\r\n      \r\n  \r\n      render() {\r\n        \r\n          return (\r\n            <div className=\"container form-container\">\r\n              <div className=\"alert alert-primary\" role=\"alert\">\r\n                Please upload an excel file consisting <strong>Candidates</strong>, for whom you want to perform a 360° Survey.\r\n                Data Configuaration should be as follows:\r\n                <ol>\r\n                    <li><strong>Candidate's Name</strong></li>\r\n                    <li><strong>Job Role</strong></li>\r\n                    <li><strong>Company Name</strong></li>\r\n                    \r\n                </ol>\r\n              </div>\r\n             \r\n              <form className='form-inline'>\r\n              <div className=\"input-group mb-3\">              \r\n                <input\r\n                  type=\"file\"\r\n                  className=\"form-control\"\r\n                  id=\"inputGroupFile02\"\r\n                  accept=\".xlsx\"\r\n                  \r\n                  onChange={(e)=>{\r\n                    this.readFile(e)\r\n                  }}\r\n                />\r\n                <button\r\n                  className=\"input-group-text btn btn-primary\"\r\n                  htmlFor=\"inputGroupFile02\"\r\n                  onClick={(e)=>{\r\n                    this.uploadCandidates(e)\r\n                  }}\r\n                >\r\n                  Upload\r\n                </button>\r\n              </div>\r\n              </form>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\" width=\"10%\">\r\n                      #\r\n                    </th>\r\n                    <th scope=\"col\" width=\"30%\">\r\n                        Candidate's Name\r\n                    </th>\r\n                    <th scope=\"col\" width=\"35%\">\r\n                        Job Role\r\n                    </th>\r\n                    <th scope=\"col\" width=\"35%\">\r\n                        Company Name\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                  this.state.tableContent.length===0?\r\n                  <tr>\r\n                  <th scope=\"row\" colSpan=\"4\" className=\"text-center\" >{'No-Data'}</th>       \r\n                </tr> :\r\n                  this.state.tableContent.map((e,i)=>\r\n                  <tr key={i+1}>\r\n                  <th scope=\"row\" >{i+1}</th>\r\n                  <td>{e.cand_name}</td>\r\n                  <td>{e.job_role}</td>\r\n                  <td className='text-center'>{e.company_name}</td>\r\n                </tr> \r\n                  )\r\n                }\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          );\r\n      }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './ManageSurvey.css'\r\nimport { Link } from 'react-router-dom'\r\nimport Loader from \"react-loader-spinner\";\r\nimport api from '../../APIs/360SurveyApi'\r\n\r\nexport default class ManageSurvey extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.createSurvey = this.createSurvey.bind(this)\r\n        \r\n        this.state = {\r\n            counter:0,\r\n            progressPercent:0,\r\n            loaderTypeCount:0,\r\n            btnDisable:'',\r\n            tableContent:[]\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.getSurveyData = this.getSurveyData.bind(this)\r\n      this.getSurveyData()\r\n    }\r\n    \r\n    createSurvey(){\r\n        api.get('createSurvey').then((res)=>{\r\n          console.log(res)\r\n          this.setState({tableContent:res.data,counter:1})\r\n        })\r\n    }\r\n\r\n    getSurveyData(){\r\n      api.get('getSurveyData').then((res)=>{\r\n        if (res.data.length>1) {\r\n          this.setState(\r\n            {\r\n              tableContent:res.data,              \r\n            }\r\n            )\r\n        }\r\n        \r\n      })\r\n    }\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"container form-container\">\r\n            <div className=\"alert alert-primary\" role=\"alert\">\r\n              Upon clicking on below button a distinct survey link will be\r\n              automatically generated for each candidates.\r\n            </div>\r\n            <div className=\"col-md-12 text-center gradient-buttons\">\r\n              {/* <button type=\"button\" className=\"btn btn-primary\">\r\n                <i className='fas fa-cogs px-3'></i>\r\n                Start Survey Engine\r\n              </button> */}\r\n              {this.state.counter > 0 ? \r\n                <button className=\"dnldButton\">\r\n                <i className=\"fa fa-download\" aria-hidden=\"true\"></i> Export in Excel\r\n              </button>\r\n               : \r\n                \r\n                <button\r\n                className=\"button-42\"\r\n                onClick={() => {\r\n                  this.createSurvey();\r\n                }}\r\n                disabled={this.state.btnDisable}\r\n              >\r\n                <i className=\"fas fa-cogs\"></i> Start Survey Engine\r\n              </button>\r\n              }\r\n            </div>\r\n            {/* {this.state.counter > 0 ? <this.progressBar /> : \"\"} */}\r\n\r\n            <table className=\"table my-3\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" width=\"5%\">\r\n                    #\r\n                  </th>\r\n                  <th scope=\"col\" width=\"30%\">\r\n                    Candidate's Name\r\n                  </th>\r\n                  <th scope=\"col\" width=\"15%\">\r\n                    Job Role\r\n                  </th>\r\n                  <th scope=\"col\" width=\"25%\">\r\n                    Responses\r\n                  </th>\r\n                  <th scope=\"col\" width=\"25%\">\r\n                    Survey Link\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.tableContent.length === 0 ? (\r\n                  <tr>\r\n                  <th scope=\"row\" colSpan=\"5\" className=\"text-center\" >{'No-Data'}</th>    \r\n                </tr> \r\n                 ) :\r\n                 this.state.tableContent.map((e,i)=>\r\n                  <tr key={i}>\r\n                    <th scope=\"row\">{i+1}</th>\r\n                    <td>{e.cand_name}</td>\r\n                    <td>{e.job_role}</td>\r\n                    <td className='text-center'>{e.responses}</td>\r\n                    <td>\r\n                      <Link target={\"_blank\"}\r\n                      to={\"/collectSurvey?survey_id=\"+e.survey_link}\r\n                      >\r\n                        https://360survey.com/{e.survey_link}\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                 )\r\n                   \r\n                   }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// progressBar(){ \r\n//   let loaderType = [\r\n//     \"Audio\",\r\n//     \"Ball-Triangle\",\r\n//     \"Bars\",\r\n//     \"Circles\",\r\n//     \"Grid\",\r\n//     \"Hearts\",\r\n//     \"Oval\",\r\n//     \"Puff\",\r\n//     \"Rings\",\r\n//     \"TailSpin\",\r\n//     \"ThreeDots\",\r\n//   ];\r\n//   return(\r\n//       <div className='loader'>\r\n//       <Loader\r\n//       type={loaderType[2]}\r\n//       // visible='true'\r\n//       color=\"#0d6efd\"\r\n//       height={100}\r\n//       width={100}\r\n//       timeout={3000} //3 secs\r\n//     />\r\n//       </div>\r\n//   )\r\n      \r\n// }","import React, { Component } from 'react'\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react'\r\nimport api from '../../APIs/360SurveyApi'\r\nimport './SurveyReport.css'\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css'\r\n\r\nconst camelcase = require('camelcase')\r\n\r\nexport default class SurveyReport extends Component {\r\n    constructor(){\r\n        super()\r\n        this.getAvgRatings = this.getAvgRatings.bind(this)\r\n        this.getTotalSurveyReport = this.getTotalSurveyReport.bind(this)  \r\n        this.onGridReady = this.onGridReady.bind(this)  \r\n        this.exportToCSV = this.exportToCSV.bind(this)  \r\n        this.state = {\r\n\r\n            tblType:0,\r\n            tableCols:[],\r\n            tableData:[],\r\n            gridAPI:[],\r\n            gridColAPI:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAvgRatings = this.getAvgRatings.bind(this)\r\n        this.getTotalSurveyReport = this.getTotalSurveyReport.bind(this)              \r\n    }\r\n\r\n    getAvgRatings(){\r\n        const tableCols = ['cand_name']\r\n        api.get('getAvgRatings').then((res)=>{\r\n            console.log('getAvgRatings',res.data)\r\n            // console.log(res.data[0])\r\n            // this.setState({avgRatingData:res.data})\r\n            const surveyData = res.data[0]\r\n\r\n            const traitNames = res.data[1]\r\n\r\n            const modTraitNames = []    \r\n                   \r\n            traitNames[0].map((trait)=>{                \r\n                modTraitNames.push(trait.trait_name)\r\n            })\r\n            \r\n            const newTableCols = tableCols.concat(modTraitNames)\r\n            \r\n            const tableHeader = []\r\n\r\n            newTableCols.map((col)=>{\r\n                let fieldData={\r\n                    headerName: camelcase(col,{pascalCase: true}), field: col, width: 150 \r\n                }\r\n                tableHeader.push(fieldData)\r\n            })\r\n\r\n            this.setState({tableCols:tableHeader,tableData:surveyData,tblType:2})\r\n        })        \r\n    }\r\n\r\n    getTotalSurveyReport(){\r\n        const tableCols = ['candidate','respondent','relation']        \r\n        api.get('getSurveyReport').then((res)=>{\r\n            // console.log('getTotalSurveyReport',res.data)\r\n            // this.setState({totalSurveyData:res.data})\r\n            const surveyData = res.data[0]\r\n\r\n            const traitNames = res.data[1]\r\n\r\n            const modTraitNames = []    \r\n                   \r\n            traitNames[0].map((trait)=>{                \r\n                modTraitNames.push(trait.trait_name)\r\n            })\r\n            \r\n            const newTableCols = tableCols.concat(modTraitNames)\r\n            \r\n            const tableHeader = []\r\n\r\n            newTableCols.map((col)=>{\r\n                let fieldData={\r\n                    headerName: camelcase(col,{pascalCase: true}), field: col, width: 250 \r\n                }\r\n                tableHeader.push(fieldData)\r\n            })\r\n\r\n            this.setState({tableCols:tableHeader,tableData:surveyData,tblType:1})\r\n        })\r\n    }\r\n\r\n    exportToCSV(){\r\n        if (this.state.tblType===1) {\r\n             this.state.gridAPI.exportDataAsCsv({fileName:'TotalSurveyData.csv'});\r\n        } else if(this.state.tblType===2) {\r\n            this.state.gridAPI.exportDataAsCsv({fileName:'AverageSurveyData.csv'});\r\n        }       \r\n    }\r\n\r\n    onGridReady(params){\r\n        this.setState({gridAPI:params.api, gridColAPI:params.columnApi})\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('tableCols',this.state.tableCols)\r\n        console.log('tableData',this.state.tableData)\r\n        return (\r\n            <div className='container ag-theme-alpine' style={{width:'100vh',height:'75vh',}}>\r\n                <div className='navbar  nvbg'>              \r\n                    \r\n                    <div className='wrapper'>\r\n                        <button className='btn btn-light mx-2 getReport' onClick={this.getTotalSurveyReport}><i class=\"far fa-list-alt\"></i> Total Survey Report</button>\r\n                        <button className='btn btn-light mx-2 getReport' onClick={this.getAvgRatings}><i class=\"fas fa-list\"></i> Average Survey Report</button>\r\n                        <button className='btn btn-light mx-2 getReport' onClick={this.exportToCSV}><i class=\"fas fa-download\"></i> Export to CSV</button>\r\n                    </div>                \r\n                    \r\n                </div>\r\n                <AgGridReact\r\n                columnDefs = {this.state.tableCols}\r\n                rowData = {this.state.tableData}\r\n                onGridReady={this.onGridReady}\r\n                >\r\n                <AgGridColumn field='count' headerName='#'></AgGridColumn>        \r\n\r\n\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\nimport { Header } from './AppComponents/HeaderComponent/Header';\nimport { Footer } from './AppComponents/FooterComponent/Footer';\nimport  SurveyComponent  from './AppComponents/SurveyComponents/SurveyComponent';\n\nimport { MainLanding } from './AppComponents/MainLanding/MainLanding';\nimport UploadTraits from './AppComponents/UploadTraits/UploadTraits';\nimport UploadCandidates from './AppComponents/UploadCandidates/UploadCandidates';\nimport ManageSurvey from './AppComponents/ManageSurvey/ManageSurvey';\nimport SurveyReport from './AppComponents/SurveyReport/SurveyReport';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  \n\n  return (\n    <>\n      <Router>\n        <Header/>\n        <Switch>\n          <Route exact path='/360survey'>\n            <MainLanding/>\n          </Route>\n          <Route exact path='/uploadTraits'>\n            <UploadTraits/>\n          </Route>  \n          <Route exact path='/uploadCandidates'>\n            <UploadCandidates/>\n          </Route>  \n          <Route exact path='/manageSurvey'>\n            <ManageSurvey/>\n          </Route>\n          <Route exact path='/collectSurvey'>\n            <SurveyComponent/>\n          </Route>\n          <Route exact path='/surveyReport'>\n            <SurveyReport/>\n          </Route>\n            \n        </Switch>\n        <Footer />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}